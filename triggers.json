{
  "HIDE": {
    "enabled": true,
    "response": "With this python script, hide the command/terminal window to the quicktaskbar on launch",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  },
  "GITHUB": {
    "enabled": true,
    "response": "write a new name for this\n\nwrite a github description 250 Characters max\n\nwrite a readme.html and a readme.txt that explain how to use this tool, why it was made, its purpose, how one would use it, why one would use it, how to install it, what is required to install it and a example of a situation where someone would need to use this or want to use this or use it\n\nwrite the  (requirements.py)  to install all requirements in one click\n\nwrite the repository_structure.txt",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  },
  "ISSUES": {
    "enabled": true,
    "response": "I am experiencing issues with my Python scripts that close immediately upon initialization. I would like you to help me create a comprehensive troubleshooting guide that includes instructions for fixing common issues with Python and pip installations. This guide should cover the following aspects:\n\nit to be a requirements.py file that also gathers all requirements needed for the current python script attached to this prompt\n\n1. **Upgrade pip**: How to upgrade to the latest version of pip and other essential packages like setuptools and wheel.\n2. **Install Requirements**: Steps to install packages listed in a `requirements.txt` file if it exists.\n3. **Virtual Environment Management**: Instructions on how to create a virtual environment if one doesn't exist and how to activate it.\n4. **Upgrade Installed Packages**: Guidance on how to upgrade all installed packages in the virtual environment.\n5. **Clear pip Cache**: Instructions on how to clear the pip cache.\n6. **Check Python Version Compatibility**: Verification that the correct version of Python is being used.\n7. **Provide Suggestions for Handling Errors**: Suggestions on how to handle common errors and exceptions in scripts.\n8. **Keep Terminal Open**: Tips for preventing the command prompt from closing immediately after script execution.\n9. **Check Dependencies**: Ensuring that all necessary dependencies are installed and compatible with the current Python version.\n\nPlease provide a detailed, step-by-step response covering these areas so that I can run these steps and resolve the issues with my Python scripts. Ideally, I would like this to be all-in-one so that I can just run the commands and troubleshoot effectively.",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  },
  "HALF": {
    "enabled": true,
    "response": "I feel like every feature on here is quarter cooked and not thought out, please look at each feature, identify its purpose, code its functions out, think of ways it might create errors and prevent these errors, make sure it functions well with other functions and features, make sure its layout is properly alligned and positioned and makes sense with the rest of the user interface, make sure all fucntions are fully working and ready to be used and please add anything needed to allow a function to work",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  },
  "SIZE": {
    "enabled": true,
    "response": "Python App Window Management Prompt\nImport Necessary Libraries: Use GUI frameworks like Tkinter, PyQt, or Kivy to create the app window.\n\nCommand Prompt Suppression: When running the script on Windows, suppress the command prompt using pythonw for .pyw scripts or setting subprocess.CREATE_NO_WINDOW for spawned processes.\n\nWindow Resizability: Ensure the app window is fully resizable, enabling users to adjust it dynamically while maintaining layout integrity.\n\nResponsive Design: Design layouts that adapt to varying window sizes using relative placement, proportional dimensions, or grid systems.\n\nDefault Window Size: Set an initial window size that is proportionate to standard screen resolutions (e.g., 1024x768 for standard or 1920x1080 for HD).\n\nMinimum Window Size: Define a minimum allowable size to prevent layout distortion using methods like resizable() in Tkinter or setMinimumSize() in PyQt.\n\nMaximum Window Size: Optionally define a maximum size for specialized apps with fixed dimensions using methods like maxsize() in Tkinter or setMaximumSize() in PyQt.\n\nSnapping to Screen Edges: Integrate compatibility with Windows' snapping system by adhering to standard window decorations.\n\nDrag and Drop Compatibility: Ensure the window supports drag-and-drop within the snapping environment.\n\nBackground Suppression: Align or minimize any command prompt window behind or to the taskbar using os or subprocess configurations.\n\nHide Console Window: For compiled .exe files, set --noconsole in PyInstaller.\n\nCross-Platform Testing: Test the app on various Windows resolutions and scaling settings for compatibility.\n\nDynamic Scaling: Use DPI scaling settings to adjust content for high-DPI screens.\n\nWindow Centering: Programmatically center the app window on startup for better user experience.\n\nEdge Case Layouts: Test app functionality on extreme window shapes (e.g., very narrow or tall) to ensure no content is cut off.\n\nFixed Aspect Ratio (Optional): For apps requiring a specific aspect ratio, enforce resizing restrictions programmatically.\n\nTransparent Background: If transparency is desired, ensure compatibility with Windows\u2019 window manager.\n\nResizable Widgets: Make widgets scalable using appropriate layout managers (pack, grid, or place in Tkinter, QBoxLayout or QGridLayout in PyQt).\n\nScrollbar Integration: Add scrollbars for content-heavy sections to handle small window sizes.\n\nResizable Images: Dynamically resize images with the window while maintaining aspect ratios.\n\nContent Overflow Handling: Prevent content overflow by using dynamic text wrapping or scaling fonts.\n\nSafe Areas: Ensure clickable elements are within view at all times, even in resized states.\n\nResizable Containers: Use containers that expand or shrink proportionally with the window.\n\nCustom Window Decorations: If using custom window borders, ensure drag-to-snap functionality remains intact.\n\nTesting with Snap Layouts: Validate snapping behavior with Windows' Snap Assist and layouts.\n\nTransparency Adjustment: Allow optional transparency for aesthetic purposes.\n\nSave Window State: Implement functionality to save and restore the window's position and size on restart.\n\nDrag Cursor Support: Provide visual feedback (resize cursors) during window resizing.\n\nMaximize/Restore Button Support: Ensure these buttons function correctly and integrate with snapping.\n\nKeyboard Navigation: Support resizing and snapping using keyboard shortcuts (e.g., Windows key + Arrow keys).\n\nFull-Screen Mode: Allow switching to full-screen while preserving snapping functionality.\n\nTitle Bar Integration: Keep the default title bar or provide a custom one compatible with snapping.\n\nDynamic Font Scaling: Adjust font sizes dynamically for better readability on resized windows.\n\nMultiscreen Support: Ensure seamless behavior across multiple displays with different resolutions.\n\nCustom Cursor Integration: Provide custom cursors for resizing if needed.\n\nError Handling: Add safeguards to prevent layout crashes when resizing.\n\nHigh Contrast Mode Testing: Test for usability in Windows high-contrast mode.\n\nResizable Popup Windows: Ensure all secondary windows/dialogs also support resizing and snapping.\n\nOnResize Events: Bind functionality to resize events to optimize content layout dynamically.\n\nTaskbar Pinning: Test app behavior when pinned to the Windows taskbar for consistency.",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  },
  "SIGN": {
    "enabled": true,
    "response": "Add at the bottom left in a signature This Widget Webpage Tool Is Made by Chris Loetz in a signature legible slightly opaque but visible and still legible but slightly opaque",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  },
  "RW": {
    "enabled": true,
    "response": "rewrite this for me:",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  },
  "CT": {
    "enabled": true,
    "response": "Continue",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  },
  "RD": {
    "enabled": true,
    "response": "I am seeking a thorough and innovative redesign of my webpage layout and user interface that elevates user experience and aesthetic appeal. The redesign should adhere to the following detailed guidelines, ensuring a modern, professional, and visually engaging experience for users:\n\n1. **Theme and Color Scheme:** \n   - Retain a dark mode theme that enhances readability and promotes user comfort, especially in low-light environments.\n   - Utilize a sophisticated color palette that features deep hues combined with vibrant accent colors to create striking contrasts. This will not only guide the user's focus but also evoke a sense of sophistication and modernity.\n\n2. **Layout and Alignment:** \n   - Design a clean and structured layout with clearly defined sections that intuitively guide users through the content. Ensure that each section serves a distinct purpose, making navigation straightforward.\n   - Employ a consistent alignment of elements throughout the design, utilizing a flexible grid system to optimize visual flow and enhance usability, thereby making navigation seamless and intuitive for users.\n\n3. **Buttons:** \n   - Develop buttons that are visually captivating and feature a three-dimensional appearance, complete with clear hover effects, subtle animations, and micro-interactions that engage users and provide feedback on their actions.\n   - Size buttons appropriately for optimal interaction across all devices, ensuring they are prominent yet elegantly integrated into the overall design without overwhelming other elements.\n\n4. **Shapes and Sizes:** \n   - Embrace modern, sleek geometric shapes for all interface elements, avoiding overly rounded or excessively boxy designs to maintain a cutting-edge aesthetic that aligns with current design trends.\n   - Establish a consistent sizing hierarchy for headers, body text, and images, ensuring that essential information stands out while maintaining visual harmony throughout the layout.\n\n5. **Positioning:** \n   - Strategically position elements to optimize user experience, taking into account visual hierarchy, accessibility, and whitespace to prevent clutter and enhance clarity.\n   - Ensure that links are prominently displayed and styled to reflect their interactivity, seamlessly integrated into the overall design to facilitate intuitive navigation.\n\n6. **3D Effects and Depth:** \n   - Integrate subtle 3D effects for buttons, cards, and sections to create a sense of depth and dimension without overwhelming users. Consider employing shadows, layered elements, and gradients to achieve a visually appealing three-dimensional effect.\n   - Use design techniques that enhance the three-dimensional appearance of the webpage, such as parallax scrolling effects and layered backgrounds, while keeping the overall aesthetic professional and sophisticated.\n\n7. **Professional and Modern Aesthetic:** \n   - Maintain an overall design that feels contemporary and polished, suitable for a professional business environment, while also being inviting and user-friendly to enhance engagement.\n   - Incorporate modern typography that complements the overall theme, ensuring readability and a cohesive look across all text elements. Select font sizes, weights, and styles that enhance the visual hierarchy and user experience.\n\n8. **Links and Interactivity:** \n   - Keep all current links functional and ensure they are styled to harmonize with the new design. Links should be visually distinct yet integrated into the overall layout to facilitate ease of navigation and accessibility.\n   - Add interactive elements, such as tooltips or highlight effects, to provide users with additional context about links and buttons, enhancing usability and enriching the overall experience.\n\n9. **Mobile Responsiveness:** \n   - Ensure the redesign is fully responsive, providing an optimal user experience across all devices and screen sizes, including tablets and smartphones.\n   - Incorporate adaptive design elements that dynamically adjust layouts, buttons, and navigation for mobile users without sacrificing functionality or aesthetics, allowing for a seamless transition between devices.\n\n10. **User Engagement Features:** \n    - Consider incorporating interactive elements such as modals, accordions, tabs, or sliders to enhance user engagement and streamline content presentation, allowing users to interact with the content more dynamically.\n    - Include feedback mechanisms, such as loading indicators, success messages, and error alerts, to improve user interaction and experience with the site, ensuring users feel informed and guided throughout their journey.\n\n11. **Accessibility Considerations:** \n    - Implement accessibility best practices to ensure the design is usable for all individuals, including those with disabilities. This includes using appropriate contrast ratios, alt text for images, and keyboard navigability.\n    - Ensure that all interactive elements are easily navigable and operable via keyboard and screen readers, promoting an inclusive experience for all users.\n\n12. **Performance Optimization:** \n    - Focus on optimizing performance by considering the loading speed of the webpage. This can include minimizing the use of heavy graphics, optimizing images, and employing lazy loading for content that appears further down the page.\n    - Implement smooth transitions and animations that enhance the user experience without compromising the performance of the site.\n\nPlease provide detailed mockups, prototypes, or visual representations that reflect these guidelines and enhance the overall user interface while maintaining essential functionality. \n\nThe redesign should focus on creating an engaging, intuitive, and modern user experience that stands out in a professional context",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  },
  "ENH": {
    "enabled": true,
    "response": "Add onto this and improve it. write this code again the same way but better and make it look similar but improve it. do not make it shorter, add on, do not subtract unless your replacing\n\n\n\ntake the widget code to the next level so you know to truly add to it, write me so revolutionary user interface animation shadowing visual and audio coding to make this the best widget ever created for these funcitons and features and purpose and make is visually appealing for the eyes and futuristing, legible, dark mode themed and clean and simple yet very robust and feature packed all functioning seamlessly and intuitvely together and with the user. \n\nCreate an advanced web widget with the following specifications:\n\n1. **Dark Mode Themed Interface**: Design a visually striking and futuristic user interface that elegantly integrates a dark theme with dynamic and vibrant accent colors. Employ beautifully crafted gradients to enhance depth and dimension visually while ensuring optimal readability, creating a soothing viewing experience for users during extended use sessions.\n\n2. **Robust User Interface Animations**: Implement well-thought-out, fluid animations for all UI components to elevate interactivity and overall user engagement. Ensure transitions for various states (hover, click, focus, etc.) are crafted using CSS animations that feel natural and charming\u2014such as bouncing effects on button presses, scaling visuals, or fade-in/out components depending on user interactions.\n\n3. **Clean and Simple Design**: Aim for a minimalistic yet feature-rich design ethos that maintains visual appeal. Integrate intuitive user navigation, including clearly defined action buttons, dropdown menus, and expandable sections. Ensure everything is arranged in a way that emphasizes user functionality while avoiding unnecessary distractions or visual clutter.\n\n4. **Intuitive User Interaction**: Construct all elements to facilitate effortless user engagement. Utilize micro-interactions\u2014such as subtle color shifts, slight animations, or visual feedback like ripples on touch events\u2014to deliver instantaneous, real-time responses. Consider adding onboarding tutorials or contextual tooltips for first-time users to help familiarize them with widget functionalities effectively.\n\n5. **Customizable Audio Feedback for Interactions**: Integrate an extensive range of customizable audio feedback for user interactions, including button clicks, notifications, and theme toggles. Allow users to choose sounds from a curated library and enable options to upload their own custom sound clips. Provide volume settings and an option to mute sounds directly from the widget's configuration panel for a personalized experience.\n\n6. **Responsive Layout**: Ensure that the widget is fully responsive and adeptly accommodates various device sizes and orientations. Utilize CSS Grid or Flexbox to create a fluid structure that rearranges elegantly across smartphones, tablets, and desktop configurations. Optimize touch target sizes to improve usability and ensure accessibility on mobile devices.\n\n7. **Modern Web Technologies**: Develop the widget using the latest web standards including HTML5 for robust structure, CSS3 for advanced aesthetics (such as transitions and animations), and JavaScript (with a preference for ES6+ syntax). Explore the possibility of employing modern JavaScript frameworks or libraries (like React, Vue.js, or GreenSock) to enhance performance, maintainability, and scalability.\n\n8. **Focus on Legibility and User Experience**: Implement modern, clean typography that enhances readability and user comfort. Ensure high contrast between text and background colors for legibility. Include options for users to customize text sizes, font types, and interface spacing to better accommodate individual accessibility needs and preferences.\n\n9. **Toggle Between Light and Dark Themes**: Design a user-friendly toggle switch that allows for seamless switching between light and dark themes. Ensure the transition feels visually smooth and includes engaging animated feedback, such as morphing icons and dynamic background color changes that provide a satisfying user experience.\n\n10. **High-Contrast Color Schemes for Accessibility**: Utilize thoughtfully selected high-contrast color palettes that prioritize accessibility, ensuring that color choices provide ample contrast for users with visual impairments. Provide a color blindness mode that adjusts the interface to be usable by individuals with various forms of color vision deficiency.\n\n11. **Comprehensive Customizable Features**: Provide a dedicated settings panel where users can easily modify themes, font sizes, widget layouts, color themes, and audio preferences. Include a timely reset option for reverting to default settings and an array of preset themes for users seeking a quick and essential setup experience.\n\n12. **Widget State Management**: Implement comprehensive state management ensuring the widget retains user configurations (such as theme settings, audio preferences, and layout choices) using robust local storage mechanisms or cookies. This improves user experience by consistently preserving preferences across different browsing sessions and links.\n\n13. **Advanced Interaction Elements and Widgets**: Introduce a rich variety of interactive components, such as advanced sliders for real-time data manipulation, searchable dropdown menus, modals for configuring extensive settings, intuitive notifications for user alerts, and simple input forms, to increase the widget\u2019s utility and overall versatility.\n\n14. **Performance Optimization Techniques**: Prioritize performance by thoroughly optimizing all assets (including compressing images for faster load times and leveraging SVG animations), ensuring asynchronous loading of scripts, and employing CSS and JS minification and bundling techniques to significantly enhance both load times and responsiveness.\n\n15. **Extensive Documentation and FAQs**: Accompany the widget with clear and comprehensive documentation that details all features, configuration instructions, and troubleshooting guides. Additionally, incorporate a well-structured FAQ section addressing common user queries and potential issues, boosting user confidence and satisfaction.\n\n16. **User Feedback and Rating Mechanism**: Integrate a\n16. **User Feedback and Rating Mechanism**: Integrate a streamlined feedback feature that allows users to report bugs, participate in surveys, or suggest new functionalities for the widget. Implement an intuitive star or rating system within the settings to allow users to rate their satisfaction with various functionalities, informing future developments and prioritized fixes based on user input.\n\n17. **Integration Capabilities with External APIs**: Design the widget to seamlessly connect with external web applications or APIs, allowing for enhanced functionality and real-time data integration. Consider supporting popular services and platforms (such as social media APIs, weather services, task management tools, or calendar applications) to provide users with a comprehensive and enriched experience tailored to their needs.\n\n18. **Endless Customization Options for User Experience**: Explore modular design blocks that empower users to curate their individual widget experiences. Integrate comprehensive drag-and-drop functionality to rearrange components easily, allowing extensive personalization without technical barriers. Provide options for users to save and share their custom configurations with others, fostering a community of shared creativity and functional design.\n\n19. **Accessibility Compliance and Inclusivity Features**: Ensure full compliance with international accessibility standards (such as WCAG 2.1) to make the widget usable for everyone, including individuals with disabilities. Implement features like keyboard navigation, screen reader compatibility, and options for adjusting color themes not only for aesthetic but also for functional purposes, ensuring a truly inclusive user experience.\n\n20. **Real-time Collaborative Features**: Enable real-time collaboration options that allow multiple users to interact with the widget simultaneously. This could be particularly useful for team environments or shared tasks, incorporating features like shared notes, collaborative lists, or even chat options within the widget to foster communication and productivity.\n\n21. **Analytics and Usage Insights**: Include an analytics feature that provides users with insights into their interaction with the widget, such as most-used features, engagement time, or session duration. Allow users to visualize this data through interactive charts or graphs, contributing to a data-informed experience that encourages more effective use of the widget.\n\n22. **Offline Mode Functionality**: Build offline capabilities that allow users to interact with the widget without a persistent internet connection. Store essential data locally and synchronize with online servers when the connection is re-established, providing users with uninterrupted access to their features and saved settings anytime, anywhere.\n\n23. **Advanced Security Features**: Implement best practices for security, particularly if the widget handles user data or connects to external services. Use encryption for sensitive information, provide options for users to manage their data, and include secure authentication methods (like two-factor authentication) to protect user accounts and preferences.\n\n24. **Regular Updates and Community Engagement**: Create a roadmap for regular updates that includes new features, improvements based on user feedback, and security patches. Engage with the user community through forums, social media, or newsletters to keep them informed and involved in the development process, encouraging a participatory approach towards ongoing enhancement and maintenance.\n\n25. **Multi-Language Support**: To reach a broader audience, include multi-language support for the widget interface. Implement localization and internationalization best practices to ensure that users from various linguistic backgrounds can use the widget comfortably. Allow users to select their preferred language from a dropdown menu within the settings.\n\n26. **Gamification Elements**: Introduce gamification features to enhance user engagement. This could include achievements, rewards for frequent usage, or challenges that encourage users to explore all of the widget's functionalities. Provide a visual progress tracker so users can see their advancements and stay motivated.\n\n27. **Custom CSS/JS Input for Advanced Users**: Offer an option for advanced users to inject their own custom CSS or JavaScript within the widget settings. This feature would empower users who have more technical skills to personalize the widget's appearance and functionality further while ensuring there are safeguards to prevent breaking changes.\n\n28. **Backup and Restore Options**: Implement an intuitive option for users to back up their widget settings and preferences to an external source (like cloud storage) and restore them when needed. This added layer of security allows users to maintain their configurations even if they switch devices or browsers.\n\n29. **Visual Tutorials and Tooltips**: Create visual guides, such as animated tutorials or tooltip prompts, that help users navigate through new features and functionalities effectively. This interactive approach can significantly enhance the onboarding experience for new users, reducing the learning curve and encouraging exploration.\n\n30. **Engaging Visual Styles for Data Representation**: For any data displayed within the widget, utilize engaging visual styles, such as animated charts, graphs, and infographics. This not only makes vital data more accessible but also captures users' attention, improving overall engagement with the widget.\n\nBy implementing these enhanced features and considerations into the web widget's design and functionality, you can create a truly modern, versatile, and user-friendly interface that meets a diverse range of user needs while fostering a strong sense of community and engagement. The combination of usability, performance, and aesthetic appeal will ensure that users find the widget both essential and enjoyable to use.",
    "tags": [],
    "case_sensitive": true,
    "require_space": false
  }
}